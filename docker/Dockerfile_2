# CUDA (from [3]) ################################
ARG UBUNTU_VERSION=20.04

ARG ARCH=
ARG CUDA=11.3
FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}.1-base-ubuntu${UBUNTU_VERSION} as base

ENV TZ=Asia/Tokyo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

###############################################
#------------------------------------------------
#User Setting
#------------------------------------------------
ARG SUDO_VERSION=*

#install sudo
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo=${SUDO_VERSION} \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Root user setting
ENV ROOT_USER=root
ARG ROOT_USER_PASSWORD=root

# root password is root
RUN echo ${ROOT_USER}:${ROOT_USER_PASSWORD} | chpasswd
WORKDIR /root/

#Ubuntu packages
RUN apt-get update -q \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    wget \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

#Add default user
#root権限以外のユーザの作成
# ENV DEFAULT_USER=docker
# ENV DEFAULT_USER_HOME=/home/${DEFAULT_USER}
# ARG DEFAULT_USER_PASSWORD=password
# ARG DEFAULT_USER_TEMP_ID=9999
# ARG DEFAULT_USER_GROUP_NAME=docker
# ARG DEFAULT_USER_GROUP_TEMP_ID=65534

# RUN groupadd -g ${DEFAULT_USER_GROUP_TEMP_ID} ${DEFAULT_USER_GROUP_NAME} && \
#     useradd -m -s /bin/bash -u ${DEFAULT_USER_TEMP_ID} -g ${DEFAULT_USER_GROUP_TEMP_ID} -G sudo ${DEFAULT_USER} && \
#     echo ${DEFAULT_USER}:${DEFAULT_USER_PASSWORD} | chpasswd && \
#     echo "${DEFAULT_USER}   ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# USER ${DEFAULT_USER_TEMP_ID}
# WORKDIR ${DEFAULT_USER_HOME}

ARG USERNAME=user
ARG GROUPNAME=user
ARG UID=1000
ARG GID=1000
ARG DEFAULT_USER_PASSWORD=password
ENV DEFAULT_USER_HOME=/home/${USERNAME}

RUN groupadd -g ${GID} ${GROUPNAME} && \
    useradd -m -s /bin/bash -u ${UID} -g ${GID} -G sudo ${USERNAME} && \
    echo ${USERNAME}:${DEFAULT_USER_PASSWORD} | chpasswd && \
    echo "${USERNAME}   ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers


USER ${USERNAME}
WORKDIR /home/${USERNAME}/

SHELL ["/bin/bash", "-c"]

# # pyenv (from [2]) ----------------
ENV DEBIAN_FRONTEND=noninteractive
RUN sudo apt-get update && sudo apt-get install -y \
    build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
    libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git

RUN curl https://pyenv.run | bash \
    && echo 'export PATH="${DEFAULT_USER_HOME}/.pyenv/bin:$PATH"' >> ${DEFAULT_USER_HOME}/.bash_profile \
    && echo 'eval "$(pyenv init -)"' >> ${DEFAULT_USER_HOME}/.bash_profile \
    && echo 'eval "$(pyenv virtualenv-init -)"' >> ${DEFAULT_USER_HOME}/.bash_profile \
    && source ${DEFAULT_USER_HOME}/.bash_profile

RUN source ${DEFAULT_USER_HOME}/.bash_profile && \
    pyenv install 3.8.0 && \
    pyenv global 3.8.0 && \
    pip install -U pip

RUN sudo cp ${DEFAULT_USER_HOME}/.bash_profile /root/.bash_profile

CMD ["/bin/bash"]

# # X window ----------------
# # RUN sudo apt-get update && sudo apt-get install -y \
# #     xvfb x11vnc python-opengl icewm \
# #     && sudo apt-get clean \
# #     && sudo rm -rf /var/lib/apt/lists/*


# # utils ----------------
# RUN sudo apt-get update -q \
#     && DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
#     curl \
#     git \
#     unzip \
#     vim \
#     wget \
#     ffmpeg \
#     tmux \
#     && sudo apt-get clean \
#     && sudo rm -rf /var/lib/apt/lists/*

# COPY .tmux.conf ${DEFAULT_USER_HOME}/

# DL ----------------
# RUN . ${DEFAULT_USER_HOME}/.bash && \
#     pip install \
#     setuptools \
#     jupyterlab \
#     widgetsnbextension && \
#     echo 'alias jl="DISPLAY=:0 jupyter lab --ip 0.0.0.0 --port 8888 --allow-root &"' >> ${DEFAULT_USER_HOME}/.bash && \
#     echo 'alias tb="tensorboard --logdir runs --bind_all &"' >> ${DEFAULT_USER_HOME}/.bash

#pytorch install ----------------
# RUN . ${DEFAULT_USER_HOME}/.bash && \
#     pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113

#experiment management ----------------
# RUN . ${DEFAULT_USER_HOME}/.bash && \
#     pip install \
#     mlflow \
#     hydra-core \
#     wandb \
#     joblib \
#     scikit-image

# RUN sudo apt-get clean && \
#     sudo rm -rf /var/lib/apt/lists/*

# COPY start.sh ${DEFAULT_USER_HOME}
# # COPY .tmux.conf ${DEFAULT_USER_HOME}

# RUN echo 'Xvfb :0 -screen 0 1400x900x24 & ' >> ${DEFAULT_USER_HOME}/Xvfb-run.sh && \
#     echo 'x11vnc -display :0 -passwd pass -forever &' >> ${DEFAULT_USER_HOME}/run-Xvfb.sh && \
#     chmod +x ${DEFAULT_USER_HOME}/run-Xvfb.sh

# RUN echo 'DISPLAY=:0 jupyter notebook --allow-root --ip=0.0.0.0 --port 8888 --notebook-dir=${DEFAULT_USER_HOME} --NotebookApp.password="sha1:71247b1fba50:6334281a44d2134e85492be9ad7426a3cf9caf90" &' >> ${DEFAULT_USER_HOME}/run-jupyter.sh && \
#     chmod +x ${DEFAULT_USER_HOME}/run-jupyter.sh

# RUN sudo cp ${DEFAULT_USER_HOME}/.bash /root/.bash

# auto start tmux and zsh
# ENTRYPOINT tmux new \; \
#             send-keys 'Xvfb :0 -screen 0 1400x900x24 & ' Enter \; \
# 	    send-keys 'x11vnc -display :0 -passwd 0123 -forever &' Enter \; \
#             split-window -v  \; \
#             send-keys "bash" Enter \; \
#             send-keys "jupyter nbextension enable --py widgetsnbextension --sys-prefix" Enter \; \
#             send-keys "bash ${DEFAULT_USER_HOME}/run-jupyter.sh" Enter \; \
# 	   new-window \; \
#             send-keys "bash" Enter \; \
#     	    send-keys clear C-m \;